using Microsoft.VisualStudio.TestTools.UnitTesting;
using SimpleProblems;

namespace UnitTests
{
    [TestClass]
    public class UnitTests
    {
        #region SumOfEvenNumbers Test Methods

        [TestMethod]
        public void CalcSumOfEvenNumbers_WithGoodValues()
        {
            //Create the test values
            int[] testArray = new int[5] { 1, 3, 2, 5, 4 };
            int correctSum = 6;

            SumOfEvenNumbers sumEvenNr = new SumOfEvenNumbers();

            //Check if the two sums are a match
            Assert.AreEqual(correctSum, sumEvenNr.CalcSumOfEvenNumbers(testArray));
        }

        [TestMethod]
        public void CalcSumOfEvenNumbers_WithBadValues()
        {
            //Create the test values
            int[] testArray = new int[5] { 1, 3, 2, 5, 4 };
            int badSum = 10;

            SumOfEvenNumbers sumEvenNr = new SumOfEvenNumbers();

            //Check if the two sums are different
            Assert.AreNotEqual(badSum, sumEvenNr.CalcSumOfEvenNumbers(testArray));
        }

        #endregion

        #region IndentifyLargestTwoNumbers Test Methods

        [TestMethod]
        public void GetLargestTwoNumbers_WithGoodValues()
        {
            //Create the test values
            int[] testArray = new int[5] { 2, 1, 4, 5, 3 };
            int[] correctResult = new int[2] { 5, 4 };// int[0] - biggest number, int[1] - 2nd biggest number 

            IndentifyLargestTwoNumbers largestTwoNumbers = new IndentifyLargestTwoNumbers();

            //Check if the two arrays contain the same values
            CollectionAssert.AreEqual(correctResult, largestTwoNumbers.CalcLargestTwoNumbers(testArray));
        }

        [TestMethod]
        public void GetLargestTwoNumbers_WithBadValues()
        {
            //Create the test values
            int[] testArray = new int[5] { 2, 1, 4, 5, 3 };
            int[] badResult = new int[2] { 4, 3 };

            IndentifyLargestTwoNumbers largestTwoNumbers = new IndentifyLargestTwoNumbers();

            //Check if the two arrays are different
            CollectionAssert.AreNotEqual(badResult, largestTwoNumbers.CalcLargestTwoNumbers(testArray));
        }

        #endregion

        #region CheckIfArrayHasDuplicates Test Methods

        [TestMethod]
        public void ArrayHasDuplicateValues_WithDuplicates()
        {
            //Create the test values
            int[] testArray = new int[7] { 2, 4, 7, 5, 2, 3, 1 };
            bool correctResult = true;

            CheckIfArrayHasDuplicates findDuplicates = new CheckIfArrayHasDuplicates();

            //Check if the function returns the correct result
            Assert.AreEqual(correctResult, findDuplicates.ArrayHasDuplicateValues(testArray));
        }

        [TestMethod]
        public void ArrayHasDuplicateValues_WithNoDuplicates()
        {
            //Create the test values
            int[] testArray = new int[7] { 2, 4, 7, 5, 6, 3, 1 };
            bool badResult = true;

            CheckIfArrayHasDuplicates findDuplicates = new CheckIfArrayHasDuplicates();

            //Check if the function's result is different than the bad result
            Assert.AreNotEqual(badResult, findDuplicates.ArrayHasDuplicateValues(testArray));
        }

        #endregion
    }
}
